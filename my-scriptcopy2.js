// Generated by Grafana k6 Studio, then refactored for clarity and metric tagging.

import { group, sleep, check } from "k6";
import http from "k6/http";
import execution from "k6/execution";
import { SharedArray } from "k6/data";
import Papa from "https://jslib.k6.io/papaparse/5.1.1/index.js";
import { htmlReport } from 'https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js';
import { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js';
// Import the Trend metric
import { Trend } from 'k6/metrics';

// ========================================================================
// ✨ THE FIX: Create custom Trend metrics to measure group duration
// ========================================================================
const groupDurationHomepage = new Trend('group_duration_homepage', true);
const groupDurationSelectProduct = new Trend('group_duration_select_product', true);
const groupDurationAddToCart = new Trend('group_duration_add_to_cart', true);


export const options = {
  stages: [
    { target: 2, duration: "30s" },
    { target: 2, duration: "30s" },
    { target: 0, duration: "30s" },
  ],
  thresholds: {
    // We can now set specific thresholds for each tagged request!
    'http_req_duration{group:::Go To HomePage,name:GetProducts_Initial}': ['p(95)<700'],
    'http_req_duration{group:::Go To HomePage,name:LoadHomePage_HTML}': ['p(95)<700'],
    'http_req_duration{group:::Select Product,name:GetProductByID}': ['p(95)<700'],
    'http_req_duration{group:::Add to Cart,name:PostToCart}': ['p(95)<700'],
    // Add thresholds for the new custom group duration metrics
    'group_duration_homepage': ['p(95) < 2000'],
    'group_duration_select_product': ['p(95) < 1500'],
    'group_duration_add_to_cart': ['p(95) < 1500'],
  },
};

const FILES = {
  SessionIDs: new SharedArray("SessionIDs", () => {
    try {
      // Make sure the path is correct relative to where you run `k6 run`
      return Papa.parse(open("../Data/SessionIDs.csv"), { header: true }).data;
    } catch (e) {
      // If the file doesn't exist or is empty, return an empty array to avoid crashing.
      console.error(`Could not load SessionIDs.csv: ${e}`);
      return [];
    }
  }),
};

function getUniqueItem(array) {
  if (!array || array.length === 0) {
    // Return a default/mock value if data loading fails or the array is empty
    return { SessonId: 'fallback-session-id' };
  }
  return array[execution.scenario.iterationInTest % array.length];
}

// --- Best Practice: Define common headers once ---
const baseAPIHeaders = {
  'sec-ch-ua-platform': `"Windows"`,
  'sec-ch-ua': `"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"`,
  'content-type': `application/json`,
  'sec-ch-ua-mobile': `?0`,
  accept: `*/*`,
  'sec-fetch-site': `same-origin`,
  'sec-fetch-mode': `cors`,
  'sec-fetch-dest': `empty`,
  'accept-encoding': `gzip, deflate, br, zstd`,
  'accept-language': `en-US,en;q=0.9`,
  priority: `u=1, i`,
};


export default function () {
  let resp; 
  const correlation_vars = {};
  const sessionId = getUniqueItem(FILES["SessionIDs"])["SessonId"];
  const BASE_URL = 'https://otel-demo.field-eng.grafana.net';

  // ===== GROUP 1: Go To HomePage =====
  let start = Date.now(); // Capture start time
  group(`Go To HomePage`, function () {
    resp = http.get(BASE_URL, {
      tags: { name: 'LoadHomePage_HTML' },
    });
    check(resp, { 'HomePage HTML status is 200': (r) => r.status === 200 });

    resp = http.get(`${BASE_URL}/api/products?currencyCode=`, {
      headers: { ...baseAPIHeaders, referer: BASE_URL },
      tags: { name: 'GetProducts_Initial' },
    });
    check(resp, { 'Initial Products status is 200': (r) => r.status === 200 });
    
    if (resp.status === 200 && resp.json().length > 0) {
        correlation_vars["product_id"] = resp.json()[0].id;
    } else {
        console.warn('Could not extract a product_id from initial product list.');
    }

    resp = http.get(`${BASE_URL}/api/cart?sessionId=${sessionId}&currencyCode=`, {
      headers: { ...baseAPIHeaders, referer: BASE_URL },
      tags: { name: 'GetCart_Initial' },
    });
    check(resp, { 'Initial Cart status is 200': (r) => r.status === 200 });

    resp = http.get(`${BASE_URL}/api/currency?`, {
        headers: { ...baseAPIHeaders, referer: BASE_URL },
        tags: { name: 'GetCurrency_Initial' },
    });
    check(resp, { 'Initial Currency status is 200': (r) => r.status === 200 });
  });
  // ✨ Add the calculated duration to the Trend metric
  groupDurationHomepage.add(Date.now() - start);

  sleep(1);

  if (!correlation_vars.product_id) {
    console.error(`Halting iteration for VU ${execution.vu.idInTest} because no product_id was found.`);
    return;
  }
  
  // ===== GROUP 2: Select Product =====
  start = Date.now(); // Capture start time
  group(`Select Product`, function () {
    const productUrl = `${BASE_URL}/product/${correlation_vars.product_id}`;

    resp = http.get(`${BASE_URL}/api/products/${correlation_vars.product_id}?currencyCode=USD`, {
        headers: { ...baseAPIHeaders, referer: productUrl },
        tags: { name: 'GetProductByID' }, 
    });
    check(resp, { 'GetProductByID status is 200': (r) => r.status === 200 });
    
    resp = http.get(`${BASE_URL}/api/recommendations?productIds=${correlation_vars.product_id}&sessionId=${sessionId}&currencyCode==USD`, {
        headers: { ...baseAPIHeaders, referer: productUrl },
        tags: { name: 'GetRecommendations' },
    });
    check(resp, { 'GetRecommendations status is 200': (r) => r.status === 200 });
  });
  // ✨ Add the calculated duration to the Trend metric
  groupDurationSelectProduct.add(Date.now() - start);

  sleep(1);

  // ===== GROUP 3: Add to Cart =====
  start = Date.now(); // Capture start time
  group(`Add to Cart`, function () {
    const productUrl = `${BASE_URL}/product/${correlation_vars.product_id}`;
    
    const addToCartPayload = JSON.stringify({
        item: { productId: correlation_vars.product_id, quantity: 1 },
        userId: "12bd4644-aadf-4a5d-b588-3657de99cd53"
    });
    resp = http.post(`${BASE_URL}/api/cart?currencyCode=USD`, addToCartPayload, {
      headers: { ...baseAPIHeaders, referer: productUrl, origin: BASE_URL },
      tags: { name: 'PostToCart' },
    });
    check(resp, { 'PostToCart status is 200': (r) => r.status === 200 });
    
    resp = http.get(`${BASE_URL}/api/cart?sessionId=${sessionId}&currencyCode==USD`, {
        headers: { ...baseAPIHeaders, referer: productUrl },
        tags: { name: 'GetCart_AfterAdd' },
    });
    check(resp, { 'GetCart After Add status is 200': (r) => r.status === 200 });
  });
  // ✨ Add the calculated duration to the Trend metric
  groupDurationAddToCart.add(Date.now() - start);

  sleep(1);
}

export function handleSummary(data) {
  return {
    'C:/Users/azureadmin/Reports/first.html': htmlReport(data),
    stdout: textSummary(data, { indent: '', enableColors: true }),
  };
}